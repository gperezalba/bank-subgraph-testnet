type Identity @entity {
    id: ID! #PIBIdentity_address
    dataHash: Bytes!
    owner: Bytes!
    recovery: Bytes!
    state: Int!
    wallet: Wallet!
    lastModification: BigInt!
    creationTime: BigInt!
}

type Token @entity {
    id: ID! #token_address
    tokenDecimals: Int!
    tokenSymbol: String!
    tokenName: String!
    totalSupply: BigDecimal!
    holders: [TokenBalance!]
    updated: Boolean!
    isNFT: Boolean!
    nftCategory: BigInt
}

type Wallet @entity {
    id: ID! #wallet_address
    name: Name
    identity: Identity @derivedFrom(field: "wallet")
    isBankUser: Boolean
    balances: [TokenBalance!] @derivedFrom(field: "wallet")
    transactions: [Transaction!]
}

type Name @entity {
    id: ID! #name_string
    name: String
    wallet: Wallet!
    owner: Bytes
}

type TokenBalance @entity {
    id: ID! #token_address-wallet_address
    token: Token!
    wallet: Wallet!
    balance: BigDecimal!
    commodities: [Commodity!]
    updated: Boolean!
}

type BankTransaction @entity {
    id: ID! #event.transaction.hash.toHex() + "-" + event.logIndex.toString()
    transaction: Transaction!
    kind: BigInt
    concept: String
    bankFee: BankFee
    info: String #Market's change when is an exchange tx for example
}

type Transaction @entity {
    id: ID! #event.transaction.hash.toHex() + "-" + event.logIndex.toString()
    from: Wallet!
    to: Wallet!
    currency: Token!
    amount: BigDecimal!
    data: Bytes!
    fee: BigDecimal!
    timestamp: BigInt!
    isBankTransaction: Boolean
    bankTransaction: BankTransaction @derivedFrom(field: "transaction")
}

type BankFee @entity {
    id: ID! #event.transaction.hash.toHex()
    transaction: BankTransaction! @derivedFrom(field: "bankFee")
    fee: BigDecimal
    kind: BigInt 
    info: String
}

type Commodity @entity {
  id: ID!
  tokenId: BigInt!
  gold: Gold
  diamond: Diamond
}

type Gold @entity {
  id: ID!
  owner: Wallet!
  reference: String!
  token: Token!
  weight_brute: BigDecimal
  weight_fine: BigDecimal
  law: BigDecimal
  isLive: Boolean
  commodity: Commodity! @derivedFrom(field: "gold")
}

type Diamond @entity {
  id: ID!
  owner: Wallet!
  reference: String!
  token: Token!
  color: BigDecimal
  clarity: BigDecimal #cambiar a BigDecimal para filtrar?
  cut: BigDecimal
  carat_weight: BigDecimal
  isLive: Boolean
  commodity: Commodity! @derivedFrom(field: "diamond")
}