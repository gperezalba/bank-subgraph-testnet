// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Receive extends EthereumEvent {
  get params(): Receive__Params {
    return new Receive__Params(this);
  }
}

export class Receive__Params {
  _event: Receive;

  constructor(event: Receive) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WalletDiamond extends SmartContract {
  static bind(address: Address): WalletDiamond {
    return new WalletDiamond("WalletDiamond", address);
  }

  isToken(param0: Address): boolean {
    let result = super.call("isToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isToken", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  nfts(param0: BigInt): Address {
    let result = super.call("nfts", [EthereumValue.fromUnsignedBigInt(param0)]);

    return result[0].toAddress();
  }

  try_nfts(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("nfts", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isNFToken(param0: Address): boolean {
    let result = super.call("isNFToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isNFToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isNFToken", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  version(): i32 {
    let result = super.call("version", []);

    return result[0].toI32();
  }

  try_version(): CallResult<i32> {
    let result = super.tryCall("version", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  facetCategory(): BigInt {
    let result = super.call("facetCategory", []);

    return result[0].toBigInt();
  }

  try_facetCategory(): CallResult<BigInt> {
    let result = super.tryCall("facetCategory", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isValueLimited(): boolean {
    let result = super.call("isValueLimited", []);

    return result[0].toBoolean();
  }

  try_isValueLimited(): CallResult<boolean> {
    let result = super.tryCall("isValueLimited", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  allowedReceiver(param0: Address): boolean {
    let result = super.call("allowedReceiver", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_allowedReceiver(param0: Address): CallResult<boolean> {
    let result = super.tryCall("allowedReceiver", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isToLimited(): boolean {
    let result = super.call("isToLimited", []);

    return result[0].toBoolean();
  }

  try_isToLimited(): CallResult<boolean> {
    let result = super.tryCall("isToLimited", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxValues(param0: Address): BigInt {
    let result = super.call("maxValues", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_maxValues(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("maxValues", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", []);

    return result[0].toAddress();
  }

  try_controller(): CallResult<Address> {
    let result = super.tryCall("controller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _identityAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
